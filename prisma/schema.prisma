// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  PARTICIPANT
  TUTOR
}

enum TaskStatus {
  PENDING
  SUBMITTED
  GRADED
}

model User {
  id            String       @id @default(cuid())
  email         String?      @unique
  firstName     String?
  lastName      String?
  userName      String?      @unique
  track         String?
  emailVerified DateTime?
  image         String?
  password      String?
  points        Int?         @default(0)
  taskScore     Int?         @default(0)
  taskCompleted Int?         @default(0)
  role          UserRole     @default(PARTICIPANT)
  accounts      Account[]
  adminTasks    AdminTask[]
  submissions   Submission[]
  // studentTasks  StudentTask[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model AdminTask {
  id          String       @id @default(cuid())
  author      User         @relation(fields: [authorId], references: [id])
  authorId    String
  title       String?
  description String?
  deadline    DateTime?
  noOfTasks   Int?
  taskGrade   Int?
  track       String?
  submissions Submission[]
}

model Submission {
  id              String     @id @default(cuid())
  participant     User       @relation(fields: [participantId], references: [id])
  participantId   String
  task            AdminTask  @relation(fields: [taskId], references: [id])
  taskId          String
  comment         String?
  submissionLink  String?
  submissionGrade Int?
  status          TaskStatus @default(PENDING)
  submittedAt     DateTime   @default(now())
}
